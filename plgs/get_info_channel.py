# # plgs/chat_info.py

# from pyrogram import Client, filters
# from pyrogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
# from db.async_session import async_session
# from db.crud import get_channel_by_id
# from utils.logger import logger


# @Client.on_callback_query(filters.regex(r"^get_info_channel:[\w\-]+$"))
# async def channel_info_handler(client: Client, callback: CallbackQuery):
#     logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞–Ω–∞–ª–∞: –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {callback.data}")

#     try:
#         channel_id = int(callback.data.split(":")[1])
#         logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω channel_id: {channel_id}")
#     except (IndexError, ValueError):
#         logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ channel_id –∏–∑ callback_data: {callback.data}")
#         await callback.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ callback_data", show_alert=True)
#         return

#     user_id = callback.from_user.id

#     async with async_session() as session:
#         channel = await get_channel_by_id(session, channel_id)

#         if not channel:
#             logger.warning(f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
#             await callback.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
#             return

#         logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel.title} (ID: {channel.channel_id})")

#     text = (
#         f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel.title}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n"
#         f"<code>channel_id: {channel.channel_id}</code>\n"
#         f"start_count_subs: {channel.start_count_subs}"
#     )

#     buttons = InlineKeyboardMarkup([
#         [InlineKeyboardButton("–ü–∞—Ä—Å–∏–Ω–≥", callback_data=f"parsing:{channel.channel_id}")],
#         [InlineKeyboardButton("–û—Ç—á—ë—Ç", callback_data=f"report:{channel.channel_id}")],
#         [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
#     ])

#     await callback.message.edit_text(text, reply_markup=buttons)
#     await callback.answer()


# plgs/get_info_channel.py
from pyrogram import Client, filters
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)

from db.async_session import async_session
from db.crud import get_channel_by_id
from utils.logger import logger

@Client.on_callback_query(filters.regex(r"^get_info_channel:[\w\-]+$"))
# @Client.on_callback_query(filters.regex(r"^get_info_channel:\d+$"))
async def channel_info_handler(client: Client, callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–∞–ª–µ.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞, –æ—Ç—á–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
    """
    logger.info(f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏: {callback.data}")
    user_id = callback.from_user.id

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ –∏–∑ callback_data
    try:
        _, channel_id_str = callback.data.split(":")
        channel_id = int(channel_id_str)
        logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω channel_id: {channel_id}")
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ channel_id: {callback.data} ‚Äî {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª –∏–∑ –±–∞–∑—ã
    async with async_session() as session:
        channel = await get_channel_by_id(session, channel_id)

        if not channel:
            logger.warning(f"–ö–∞–Ω–∞–ª —Å ID {channel_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            await callback.answer("‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        logger.info(f"–ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {channel.title} (ID: {channel.channel_id})")

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–Ω–æ–ø–∫–∏
    text = (
        f"‚úÖ –ö–∞–Ω–∞–ª <b>{channel.title}</b> —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.\n"
        f"<code>channel_id: {channel.channel_id}</code>\n"
        f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ: {channel.start_count_subs}"
    )

    buttons = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(
                text="üì• –ü–∞—Ä—Å–∏–Ω–≥",
                callback_data=f"parsing:{channel.channel_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üìä –û—Ç—á—ë—Ç",
                callback_data=f"report:{channel.channel_id}"
            )
        ],
        [
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="start"
            )
        ],
    ])

    await callback.message.edit_text(text, reply_markup=buttons)
    await callback.answer()

