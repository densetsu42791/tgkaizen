# plgs/parse_subs.py
# from pyrogram import Client, filters
# from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
# from src.parse import parsing_with_userbot
# from utils.logger import logger


# @Client.on_callback_query(filters.regex(r"^parsing:[\w\-]+$"))
# async def cb_parsing(client: Client, callback: CallbackQuery):
#     user_id = callback.from_user.id
#     channel_id = int(callback.data.split(":")[1])

#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_id}")
#     await callback.answer("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

#     try:
#         result = await parsing_with_userbot(channel_id)

#     except Exception as e:
#         logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
#         await callback.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

#     await callback.message.reply(
#             f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {result} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
#             reply_markup=InlineKeyboardMarkup([
#                 [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", callback_data=f"get_info_channel:{channel_id}")],
#                 [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
#             ])
#         )



# plgs/parse_subs.py
# from pyrogram import Client, filters
# from pyrogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
# from src.parse import parsing_with_userbot
# from utils.logger import logger
# import asyncio
# from pyrogram.errors import FloodWait

# @Client.on_callback_query(filters.regex(r"^parsing:[\w\-]+$"))
# async def cb_parsing(client: Client, callback: CallbackQuery):
#     user_id = callback.from_user.id
#     channel_id = int(callback.data.split(":")[1])

#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_id}")
#     await callback.answer("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

#     try:
#         result = await parsing_with_userbot(channel_id)

#     # except FloodWait as e:
#     #     wait_time = e.value
#     #     logger.warning(f"FloodWait: –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥")
#     #     await callback.message.edit_text(f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {wait_time} —Å–µ–∫—É–Ω–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ.")
#     #     return

#     except Exception as e:
#         logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
#         await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
#         return

#     # —Å—é–¥–∞ –º—ã –ø–æ–ø–∞–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ result —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω
#     await callback.message.reply(
#         f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {result} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
#         reply_markup=InlineKeyboardMarkup([
#             [InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–∞–Ω–∞–ª—É", callback_data=f"get_info_channel:{channel_id}")],
#             [InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
#         ])
#     )


import asyncio

from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)

from src.parse import parsing_with_userbot
from utils.logger import logger


@Client.on_callback_query(filters.regex(r"^parsing:\d+$"))
async def cb_parsing(client: Client, callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.

    :param client: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback.from_user.id
    channel_id_str = callback.data.split(":")[1]

    try:
        channel_id = int(channel_id_str)
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π channel_id –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {channel_id_str}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_id}")
    await callback.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

    try:
        result = await parsing_with_userbot(channel_id)

    except FloodWait as e:
        logger.warning(f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.x} —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.x} —Å–µ–∫—É–Ω–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–∞—Ä—Å–∏–Ω–≥
    await callback.message.reply(
        f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {result} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –ò–Ω—Ñ–æ –æ –∫–∞–Ω–∞–ª–µ", callback_data=f"get_info_channel:{channel_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ])
    )




############
# import asyncio

# from pyrogram import Client, filters
# from pyrogram.errors import FloodWait
# from pyrogram.types import (
#     CallbackQuery,
#     InlineKeyboardButton,
#     InlineKeyboardMarkup
# )

# from src.parse import parsing_with_userbot
# from utils.logger import logger


# @Client.on_callback_query(filters.regex(r"^parsing:\d+$"))
# async def cb_parsing(client: Client, callback: CallbackQuery) -> None:
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.

#     :param client: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
#     :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     """
#     user_id = callback.from_user.id
#     channel_id_str = callback.data.split(":")[1]

#     try:
#         channel_id = int(channel_id_str)
#     except ValueError:
#         logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π channel_id –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {channel_id_str}")
#         await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.")
#         return

#     logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_id}")
#     await callback.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

#     try:
#         result = await parsing_with_userbot(channel_id)

#     except FloodWait as e:
#         logger.warning(f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.x} —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_id}")
#         await callback.message.edit_text(
#             f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.x} —Å–µ–∫—É–Ω–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
#         )
#         return

#     except Exception as e:
#         logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
#         await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return

#     # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–∞—Ä—Å–∏–Ω–≥
#     await callback.message.reply(
#         f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {result} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
#         reply_markup=InlineKeyboardMarkup([
#             [InlineKeyboardButton("üìä –ò–Ω—Ñ–æ –æ –∫–∞–Ω–∞–ª–µ", callback_data=f"get_info_channel:{channel_id}")],
#             [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
#         ])
#     )



# plgs/parse_subs.py
import asyncio

from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from pyrogram.types import (
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup
)

from src.parse import parsing_with_userbot
from utils.logger import logger


# @Client.on_callback_query(filters.regex(r"^parsing:\d+$"))
@Client.on_callback_query(filters.regex(r"^parsing:[\w\-]+$"))
async def cb_parsing(client: Client, callback: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞.

    :param client: —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
    :param callback: –æ–±—ä–µ–∫—Ç CallbackQuery –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–∞—Ä—Å–∏–Ω–≥")
    user_id = callback.from_user.id
    channel_id_str = callback.data.split(":")[1]

    try:
        channel_id = int(channel_id_str)
    except ValueError:
        logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π channel_id –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {channel_id_str}")
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∫–∞–Ω–∞–ª–∞.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ {channel_id}")
    await callback.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥...")

    try:
        result = await parsing_with_userbot(channel_id)

    except FloodWait as e:
        logger.warning(f"FloodWait: –æ–∂–∏–¥–∞–Ω–∏–µ {e.x} —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_id}")
        await callback.message.edit_text(
            f"‚ö†Ô∏è Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å {e.x} —Å–µ–∫—É–Ω–¥. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω –ø–∞—Ä—Å–∏–Ω–≥
    await callback.message.reply(
        f"‚úÖ –°–æ–±—Ä–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {result} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –ò–Ω—Ñ–æ –æ –∫–∞–Ω–∞–ª–µ", callback_data=f"get_info_channel:{channel_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")]
        ])
    )
