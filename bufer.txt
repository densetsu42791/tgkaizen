Продолжаем создавать чат-бота для сбора аналитики по приватному тг-каналу.
Сейчас структура моего проекта выглядит так:
├── alembic.ini
├── app
│   ├── bot.py
│   ├── db
│   │   ├── crud
│   │   │   ├── channel.py
│   │   │   ├── __init__.py
│   │   │   └── user.py
│   │   ├── __init__.py
│   │   ├── migrations
│   │   │   ├── env.py
│   │   │   ├── script.py.mako
│   │   │   └── versions
│   │   ├── models.py
│   │   └── session.py
│   ├── __init__.py
│   ├── plugins
│   │   ├── add_channel.py
│   │   ├── __init__.py
│   │   └── start.py
│   ├── src
│   │   ├── __init__.py
│   │   └── stats.py
│   └── utils
│       ├── helpers.py
│       ├── __init__.py
│       └── user_state.py
├── config.ini
├── main.py
├── requirements.txt
├── sessions
│   ├── bot.session
└── venv_tg2



# Содержимое файлов: 


# === app/bot.py === 
from pyrogram import Client
import configparser


config = configparser.ConfigParser()
config.read("config.ini")


def create_bot():
    return Client(
        "bot",
        api_id=int(config["bot"]["api_id"]),
        api_hash=config["bot"]["api_hash"],
        bot_token=config["bot"]["bot_token"],
        plugins=dict(root=config["bot"]["plugins_root"]),
        workdir="sessions"
    )


def create_userbot():
    return Client(
        "userbot",
        api_id=int(config["userbot"]["api_id"]),
        api_hash=config["userbot"]["api_hash"],
        plugins=dict(root=config["userbot"]["plugins_root"]),
        workdir="sessions"
    ) 



# === app/db/crud/channel.py === 
from pyrogram import Client
from pyrogram.types import Message, ChatPrivileges
from pyrogram.enums import ChatType
from pyrogram.errors import UserNotParticipant, ChannelInvalid, PeerIdInvalid, RPCError
from app.db.session import async_session
from app.db.models import User, Channel
from sqlalchemy import select
import logging
from app.utils.user_state import waiting_channel

logger = logging.getLogger(__name__)


async def process_channel_addition(client: Client, user_id: int, command_call=False, message: Message = None) -> str:
    async with async_session() as session:

        result = await session.execute(select(User).where(User.user_id == user_id))
        user = result.scalar_one_or_none()

        if not user:
            return "Сначала нажмите /start"

        if command_call:
            waiting_channel[user_id] = True
            return "Перешлите сообщение из канала."

        try:
            chat = message.forward_from_chat
            logger.info(f"CHAT: {chat}")
            if not chat:
                raise ValueError("Нет пересланного чата")

            full_chat = await client.get_chat(chat.id)

        except Exception as e:
            logger.warning(f"Ошибка при получении канала: {e}")
            return "❌ Ошибка при получении канала."

        result = await session.execute(select(Channel).where(Channel.channel_id == full_chat.id))
        already_linked = result.scalar_one_or_none()

        if already_linked:
            return f"Канал {full_chat.title} уже добавлен."

        new_channel = Channel(
            channel_id=full_chat.id,
            title=full_chat.title,
            user_id=user_id
        )
        session.add(new_channel)
        await session.commit()


        waiting_channel.pop(user_id, None)


        return full_chat.title 



# === app/db/crud/user.py === 
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from app.db.models import User


import logging
logger = logging.getLogger(__name__)


async def get_user(session: AsyncSession, user_id: int) -> User | None:
    stmt = select(User).where(User.user_id == user_id)
    result = await session.execute(stmt)
    return result.scalar_one_or_none()


async def create_user(session: AsyncSession, user: User):
    session.add(user)
    await session.commit() 



# === app/db/models.py === 
from sqlalchemy.orm import Mapped, mapped_column, relationship, DeclarativeBase
from sqlalchemy import BigInteger, String, DateTime, ForeignKey, Boolean, UniqueConstraint, text
from app.db.session import Base
from datetime import datetime

class User(Base):
    __tablename__ = "users"
    user_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    first_name: Mapped[str] = mapped_column(String(128), nullable=True)
    join_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), server_default=text("CURRENT_TIMESTAMP"))

    channels: Mapped[list["Channel"]] = relationship(back_populates="user", cascade="all, delete-orphan")
class Channel(Base):
    __tablename__ = "channels"
    channel_id: Mapped[int] = mapped_column(BigInteger, primary_key=True)
    title: Mapped[str] = mapped_column(String(100))

    user_id: Mapped[int] = mapped_column(BigInteger, ForeignKey("users.user_id", ondelete="CASCADE"))

    user: Mapped["User"] = relationship(back_populates="channels")
 


# === app/db/session.py === 
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker
from sqlalchemy.orm import DeclarativeBase
import configparser

config = configparser.ConfigParser()
config.read("config.ini")

DB_URL=config["database"]["url_asyncpg"]

async_engine = create_async_engine(DB_URL, echo=True)
async_session = async_sessionmaker(async_engine, expire_on_commit=False)

class Base(DeclarativeBase):
    pass 



# === app/plugins/add_channel.py === 
from pyrogram import Client, filters
from pyrogram.types import Message
from app.db.crud.channel import process_channel_addition
from app.utils.user_state import waiting_channel

import logging
logger = logging.getLogger(__name__)

@Client.on_message(filters.command("add_channel") & filters.private)
async def cmd_add_channel(client: Client, message: Message):
    user_id = message.from_user.id
    logger.info(f"User {user_id} вызвал \add_channel.")
    response = await process_channel_addition(client, user_id, command_call=True)
    await message.reply_text(response)

@Client.on_message(filters.private & filters.forwarded)
async def receive_forwarded_channel_message(client: Client, message: Message):
    user_id = message.from_user.id
    if waiting_channel.get(user_id):
        response = await process_channel_addition(client, user_id, message=message)
        logger.info(f"User {user_id} отправил сообщение.")
        await message.reply_text(response) 


# === app/plugins/start.py === 
from pyrogram import Client, filters
from pyrogram.types import Message
from app.db.session import async_session
from app.db.models import User
from app.db.crud.user import get_user, create_user

import logging
logger = logging.getLogger(__name__)

@Client.on_message(filters.private & filters.command("start"))
async def cmd_start(client: Client, message: Message):
    user = message.from_user
    first_name = message.from_user.first_name

    logger.info(f"User {first_name} started the bot.")

    async with async_session() as session:
        existing = await get_user(session, user.id)
        if not existing:
            await create_user(session, User(
                user_id=user.id,
                first_name=user.first_name,
            ))
    await message.reply(f"Привет, \n{existing}!")



# === app/utils/user_state.py === 
waiting_channel: dict[int, bool] = {}




# === main.py === 
import asyncio
from pyrogram import compose
import logging
from app.bot import create_bot, create_userbot
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
async def main():
    bot = create_bot()
    await compose([bot])
asyncio.run(main())



Переделай мой учитывая следующие требования:
1. 